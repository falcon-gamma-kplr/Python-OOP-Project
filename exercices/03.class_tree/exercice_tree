import json
from treelib import Tree
import os

def json_dict_from_file():
    """
    Cette fonction ouvre et charge les données JSON du fichier
    dans un dictionnaire Python.

    Returns:
        dict: le dictionnaire Python contenant les données JSON du fichier
    """
    # Get the directory path of the current Python file
    local_path = os.path.dirname(os.path.abspath(__file__))
    # Chargement des données JSON à partir du fichier dans un dictionnaire python
    #json_data = json.load(open(os.path.join(local_path, 'json_data.json'), "rb"))
    json_dict = json.load(open(os.path.join(local_path, 'json_data.json'), "r",encoding="utf-8"))

    return json_dict

def create_tree_from_dict(json_dict):
    my_tree = Tree()
    my_tree.create_node(tag="Racine", identifier="racine")
    recusive_tree_from_json(my_tree, json_dict, "racine")
    return my_tree


def recusive_tree_from_json(tree, parent_dict, parent_node_id):
    """
    Cette fonction crée un arbre à partir d'un dictionnaire.
    Elle est appelée récursivement pour chaque sous-dictionnaire.

    Args:
        tree (Tree): un objet Tree de la bibliothèque treelib pour représenter l'arbre
        parent_node_id (str): l'identifiant du noeud parent dans l'arbre
        parent_dict (dict): le dictionnaire Python contenant les données à insérer dans l'arbre
    """
    for key, value in parent_dict.items():
        if isinstance(value, dict):# and "subclasses" in value.keys():
            # Créer un nouveau noeud pour la clé courante du dictionnaire
            new_node_id = f"{parent_node_id}.{key}"
            tree.create_node(tag=key, identifier=new_node_id, parent=parent_node_id)
            
            # Créer récursivement le sous-arbre pour le dictionnaire courant
            if "subclasses" in value.keys():
                recusive_tree_from_json(tree, value["subclasses"], new_node_id)
        #else:
            # Créer un nouveau noeud pour la feuille courante du dictionnaire
            #leaf_node_id = f"{parent_node_id}.{key}"
            #tree.create_node(tag=f"{key}: {value}", identifier=leaf_node_id, parent=parent_node_id)


def main():
    # Charger les données JSON depuis un fichier et créer la structure de l'arbre à partir du dictionnaire
    json_dict = json_dict_from_file()
    res = create_tree_from_dict(json_dict)

    # Afficher l'arbre
    res.show()

if __name__ == '__main__':
    # Appeler la fonction principale
    main()